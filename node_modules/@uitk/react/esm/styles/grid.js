import{Breakpoint as n}from'../constant.js';import{calc as a}from'./calc.js';import{math as c}from'polished';var o=function n(c,o,e,t){if(c>0){var l=o?100:c/12*100,r=t?"col-".concat(t,"-").concat(c):"col-".concat(c);return"\n    .".concat(r," {\n        flex-basis: ").concat(l,"%;\n        max-width: ").concat(l,"%;\n        padding: ").concat(a(e,.5),";\n    }\n    ").concat(n(c-1,o,e,t))}return""},e=function(e){var t=e.spacing;return"\n    ".concat("\n  .grid {\n    &,\n    *,\n    &::after,\n    &::before {\n      box-sizing: border-box;\n    }\n\n    width: 100%;\n    padding: @spacing-xs;\n    margin: 0 auto;\n  }\n\n  .grid-max-width {\n    max-width: 1440px;\n  }\n\n  // Grid row\n  .row {\n    display: flex;\n    flex-wrap: wrap;\n  }\n","\n    ").concat(o(12,!0,t.base.value),"\n    ").concat(o(12,!0,t.base.value,"s"),"\n    ").concat(o(12,!0,t.base.value,"m"),"\n    ").concat(o(12,!0,t.base.value,"l"),"\n    .col {\n      flex-basis: 0;\n      flex-grow: 1;\n      max-width: 100%;\n      padding: ").concat(a(t.base.value,.5),";\n    }\n    @media only screen and ").concat(n.s,"  {\n        ").concat(o(12,!1,t.base.value),"\n        ").concat(o(12,!1,t.base.value,"s"),"\n    }\n\n    @media only screen and ").concat(n.m," {\n        ").concat(o(12,!1,t.m.value),"\n        ").concat(o(12,!1,t.m.value,"m"),"\n        .grid {\n            padding: ").concat(c(t.sm.value+"+"+t.xs.value),";\n        }\n        .col {\n            padding: ").concat(a(t.m.value,.5),";\n        }\n    }\n    @media only screen and ").concat(n.l," {\n        ").concat(o(12,!1,t.m.value),"\n        ").concat(o(12,!1,t.m.value,"l"),"\n        .grid {\n            padding: ").concat(c(t.sm.value+"+"+t.xs.value),";\n        }\n        .col {\n            padding: ").concat(a(t.m.value,.5),";\n        }\n    }\n    // Removes gutters from the column. To be placed on the col div.\n    .row-no-gutter {\n        margin: 0;\n    }\n    .row-no-gutter [class*='col'] {\n        padding: 0;\n    }\n  ")};export{e as createGridUtilityClasses};
