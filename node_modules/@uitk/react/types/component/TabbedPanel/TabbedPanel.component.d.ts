import React, { FC } from "react";
import { PressEvent } from "@react-types/shared";
export interface ITabbedPanel {
    /**
     * TabbedPanel header text
     */
    header?: string;
    /**
     * TabbedPanel className
     */
    className?: string;
    /**
     * TabbedPanel content
     */
    content?: React.ReactNode;
}
declare const transitionStyles: {
    enter: string;
    entering: string;
    entered: string;
    exiting: string;
    exited: string;
};
export interface TabbedPanelProps {
    /**
     * TabbedPanel panels array
     */
    panels: ITabbedPanel[];
    /**
     * TabbedPanel onHeaderPress callback
     */
    onHeaderPress?: (panelId: number) => void;
    /**
     * TabbedPanel selected panel
     */
    selectedPanel?: number;
    /**
     * TabbedPanel classname
     */
    className?: string;
    /**
     * TabbedPanel id
     */
    id?: string;
    /**
     * Optional prop to change the header tag for the panel titles in mobile view. Defaults to h3.
     */
    titlesAs?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
}
export declare const TabbedPanel: FC<TabbedPanelProps>;
export interface ITabbedPanelButtonProps extends React.ComponentProps<"button"> {
    children: string;
    onPress: (e: PressEvent) => void;
    className?: string;
    selectedPanel?: number;
    active?: boolean;
    ariaSelected?: boolean;
    buttonTabIndex?: number;
    ariaControls?: string;
    ariaLabelledBy?: string;
    id?: string;
    panel?: any;
    onHeaderPress?: (e: PressEvent) => void;
}
export interface ITabbedPanelHeaderProps {
    panels: ITabbedPanel[];
    onHeaderPress: (panelId: number) => void;
    selectedPanel?: number;
    className?: string;
    active?: boolean;
    id?: string;
    getTabIdForIndex: (index: number) => string;
    getPanelIdForIndex: (index: number) => string;
}
export interface ITabbedContentProps {
    transition?: keyof typeof transitionStyles;
}
export {};
