import React, { FC } from "react";
import { ComponentID } from "@constant";
export declare type TrackingState = Record<string, boolean>;
export declare type TrackingStateSetter = (componentId: ComponentID, event: string) => void;
interface TrackingInterface {
    track: TrackingFn;
    trackable: Trackable;
    mount: EventBoundTrackingFn;
}
export declare const TrackingContext: React.Context<TrackingInterface>;
interface TrackingProviderProps {
    appId?: string;
}
declare type Context = Record<string, unknown>;
interface TrackingPayload {
    event: string;
    id: ComponentID;
    context?: Context;
}
interface FinalTrackingPayload extends TrackingPayload {
    appId: string;
}
export declare type TransportFn = (payload: FinalTrackingPayload) => void;
declare type TrackingFn = (payload: TrackingPayload) => void;
declare type EventBoundTrackingFn = (id: ComponentID, context?: Context) => void;
declare type Trackable = (fn: Function) => (payload: TrackingPayload) => (...args: unknown[]) => void;
export declare const resetTrackingState: () => TrackingState;
export declare const TrackingProvider: FC<TrackingProviderProps>;
export declare function useTracking(): TrackingInterface;
export {};
