import React, { FC } from "react";
import { NavigationConfig, NavigationState, NavType } from "../types";
import { INavigationInternalCallbacks, INavigationDispatchContext } from "../types";
export declare const NavigationVariantContext: React.Context<NavType>;
interface IRefs {
    [key: string]: React.MutableRefObject<any>;
}
export declare const NavigationProvider: FC<{
    variant: NavType;
    initialState: NavigationState;
    useLocation: () => any;
    internalCallbacks: INavigationInternalCallbacks;
    refs: IRefs;
    config: NavigationConfig;
}>;
export declare function useNavigationConfig(): NavigationConfig;
export declare function useNavigationState(): NavigationState;
export declare function useNavigationOptions(): {
    label?: string;
    isActive?: (url: string, route: string) => boolean;
    linkAs?: React.ComponentClass<import("../types").LinkProps, any> | React.FunctionComponent<import("../types").LinkProps>;
    onLinkClick?: (e: React.MouseEvent<HTMLElement, MouseEvent>, item: import("../types").NavigationStateLink) => void;
    panelExpandedIcon?: React.ReactNode;
    panelClosedIcon?: React.ReactNode;
    panelFlyoutIcon?: React.ReactNode;
} | {
    label?: string;
    isActive?: (url: string, route: string) => boolean;
    linkAs?: React.ComponentClass<import("../types").LinkProps, any> | React.FunctionComponent<import("../types").LinkProps>;
    onLinkClick?: (e: React.MouseEvent<HTMLElement, MouseEvent>, item: import("../types").NavigationStateLink) => void;
    panelExpandedIcon?: React.ReactNode;
    panelClosedIcon?: React.ReactNode;
    panelFlyoutIcon?: React.ReactNode;
};
export declare function useNavigationDispatch(): INavigationDispatchContext;
export declare function useNavigationVariant(): NavType;
export declare function useInternalCallbacks(): INavigationInternalCallbacks;
export declare function useNavigationRefs(): IRefs;
export {};
