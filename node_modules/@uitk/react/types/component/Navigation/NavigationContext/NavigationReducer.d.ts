import { NavigationStateLink, NavigationStatePanel, NavigationState, NavigationConfig, NavType } from "../types";
/******************************************************************************
 * Helpers
 *****************************************************************************/
export declare const isPanel: (item: NavigationStateLink | NavigationStatePanel | Partial<NavigationStateLink> | Partial<NavigationStatePanel>) => item is NavigationStatePanel;
export declare const getActiveStateForRoute: (state: NavigationConfig | NavigationState, { isDesktop, route }: routeUpdatePayload) => NavigationState;
/**
 * getOpenState is used to compute the expanded state of the navigation when a panel
 * is opened.
 */
export declare const getStateForOpenPanelUpdate: (group: NavigationState | NavigationConfig, context: openPanelPayload) => NavigationState;
/**
 * getClosedState is used to compute the expanded state of the navigation when a panel
 * is closed.
 */
export declare const getStateForClosePanelUpdate: (group: NavigationState | NavigationConfig, label: string) => NavigationState;
export declare const getStateForCloseNavUpdate: (group: NavigationState | NavigationConfig) => NavigationState;
export declare const getStateForOpenNavAtActivePanelUpdate: (group: NavigationState | NavigationConfig) => NavigationState;
declare enum ActionType {
    ROUTE_UPDATE = "ROUTE_UPDATE",
    OPEN_PANEL = "OPEN_PANEL",
    CLOSE_PANEL = "CLOSE_PANEL",
    CLOSE_NAV = "CLOSE_NAV",
    OPEN_NAV_ACTIVE_PATH = "OPEN_NAV",
    RESET_NAVIGATION_STATE = "RESET_NAVIGATION_STATE"
}
interface NavigationAction<T = void> {
    type: ActionType;
    payload?: T;
}
export declare type routeUpdatePayload = {
    route: string;
    isDesktop: boolean;
};
export declare const routeUpdate: (route: string, isDesktop?: boolean) => NavigationAction<routeUpdatePayload>;
export declare type openPanelPayload = {
    label: string;
    variant: NavType;
    isDesktop: boolean;
};
export declare const openPanel: (label: string, variant: NavType, isDesktop?: boolean) => NavigationAction<openPanelPayload>;
export declare type closePanelPayload = string;
export declare const closePanel: (label: string) => NavigationAction<closePanelPayload>;
export declare const closeNav: () => NavigationAction;
export declare const openNavAtActivePath: () => NavigationAction;
export declare const resetNavigationState: (payload: NavigationState) => {
    type: ActionType;
    payload: NavigationState;
};
export declare const reducer: (state: NavigationConfig | NavigationState, action: NavigationAction<any>) => NavigationState | NavigationConfig;
export {};
