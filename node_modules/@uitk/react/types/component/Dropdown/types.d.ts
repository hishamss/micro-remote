export declare type IDropdownItem = {
    id: string | number;
    label: string;
    value: string | number | IDropdownItem[];
};
interface DropdownBaseProps {
    /**
     * Optional classname applied to component root.
     */
    className?: string;
    /**
     * Id of Dropdown.
     */
    id?: string;
    /**
     * Array of items that will be rendered in the dropdown component.
     */
    items: IDropdownItem[];
    /**
     * Whether dropdown is in error state.
     */
    error?: null | string;
    /**
     * Whether dropdown is in disabled state.
     */
    disabled?: boolean;
    /**
     * Whether dropdown is required.
     */
    required?: boolean;
    /**
     * Placeholder for dropdown without a selection.
     */
    placeholderText?: string;
    /**
     * Callback for when dropdown is blurred.
     */
    onBlur?: () => void;
}
export interface DropdownSingleProps extends DropdownBaseProps {
    type: "single";
    /**
     * Provided value for single context dropdown.
     */
    value?: IDropdownItem;
    /**
     * Use Form Control describedby as labelledby for uniform screen reader performance.
     */
    labelledBy?: string;
    /**
     * Callback for when dropdown value changes.
     */
    onChange?: onSingleDropdownChange;
    fieldsetLabel?: never;
    initialValues?: never;
    selectAllLabel?: never;
    selectGroupLabel?: never;
    buttonDescriptiveText?: never;
    selectedText?: never;
}
export interface DropdownMultiProps extends DropdownBaseProps {
    type: "multi";
    /**
     * Provided value for multi context dropdown.
     */
    value?: IDropdownItem[];
    /**
     * Provided values for multi context dropdown.
     */
    initialValues?: IDropdownItem[];
    /**
     * Provided label for dropdown fieldset.
     */
    fieldsetLabel: string;
    /**
     * Callback for when dropdown value changes.
     */
    onChange?: onMultiDropdownChange;
    /**
     * Use Form Control describedby as labelledby for uniform screen reader performance.
     */
    labelledBy?: string;
    /**
     * Provided label for dropdown select all.
     */
    selectAllLabel?: string;
    /**
     * Provided label for dropdown groups select all.
     */
    selectGroupLabel?: string;
    /**
     * Provided, visually hidden descriptive text for button used for a11y.
     */
    buttonDescriptiveText?: string;
    /**
     * Provided, visually hidden selected text for button used for a11y.
     */
    selectedText?: string;
}
export declare type DropdownProps = DropdownSingleProps | DropdownMultiProps;
export declare type onSingleDropdownChange = (selection: IDropdownItem) => void;
export declare type onMultiDropdownChange = (selection: IDropdownItem[]) => void;
export declare type IDropdownState = {
    open: boolean;
    touched: boolean;
    selectedItems: IDropdownItem[];
    triggerHeight?: string;
    focusedIndex: number;
    initialCharacters: string[];
};
export declare type IDropdownAction = {
    type?: DropdownActionType;
    payload?: any;
};
export declare enum DropdownActionType {
    TOGGLE_DROPDOWN = 0,
    CLOSE_DROPDOWN = 1,
    ADD_SELECTED_ITEMS = 2,
    REMOVE_SELECTED_ITEMS = 3,
    SET_ITEMS = 4,
    SET_TRIGGER_HEIGHT = 5,
    DESELECT_ALL = 6,
    FOCUS_ITEM = 7,
    SET_INITIAL_CHARACTERS = 8
}
export {};
