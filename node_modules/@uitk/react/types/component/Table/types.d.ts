import React from "react";
export interface ITableData {
    /**
     * Unique id for data object
     */
    id: string;
    /**
     * Keys for data object
     */
    [key: string]: string;
}
declare type onRenderCell = (row: ITableData, columnKey: string | undefined, columnLabel: string) => React.ReactNode;
declare type ExpandableRows = Record<string, {
    content: React.ReactElement;
    expanded?: boolean;
    removePadding?: boolean;
    altHideRowButtonText?: string;
}>;
export declare type IExpandableContent = {
    /**
     * Expand row column header label
     */
    columnHeaderText?: string;
    /**
     * Hide expanded row button text
     */
    hideRowButtonText?: string;
    /**
     * Expand row button aria label getter. Needed for a11y.
     */
    getExpandButtonAriaLabel: (rowData: ITableData) => string;
    /**
     * Optional expand row button aria label prefix. Useful for localisation.
     */
    expandButtonAriaLabelPrefix?: string;
    /**
     * Hide expanded row button aria label getter. Needed for a11y.
     */
    getHideRowButtonAriaLabel: (rowData: ITableData) => string;
    /**
     * Optional hide expanded row button aria label prefix. Useful for localisation.
     */
    hideRowButtonAriaLabelPrefix?: string;
    /**
     * Expandable row content
     */
    rows: ExpandableRows;
    /**
     * Optional callback for when expandable row buttons are pressed. Can be used
     * to implement a controlled component.
     */
    onExpandableRowBtnPress?: (expandState: boolean, rowId: number) => void;
};
export declare type SortFn = (data: ITableData[], sortDirection: SortDirection, columnId: string) => ITableData[];
export interface ITableConfig {
    /**
     * Table columns
     */
    columns: ITableColumn[];
    /**
     * Whether global sort is enabled
     */
    sort?: boolean;
    /**
     * Sort function to use. Overrides the default table sort.
     */
    sortFn?: SortFn;
    /**
     * Sort function to use. Overrides the default table sort.
     */
    onSort?: OnSortFunction;
    /**
     * Caption configuration
     */
    caption?: ITableCaption;
    /**
     * Sticky Header & Sticky Caption Configuration
     */
    sticky?: IStickyConfig;
    /**
     *  Whether table is nested or not
     */
    nested?: boolean;
    /**
     * Optional render callback for when a td is rendered
     */
    onRenderCell?: onRenderCell;
    /**
     * Sets the Table aria-labelled by to the passed string (required if defining your own caption)
     */
    labelledBy?: string;
}
export interface ITableColumn {
    /**
     * Key used to lookup row data for this column in a row data object
     */
    key?: string;
    /**
     * Display label for column
     */
    label: string;
    /**
     * Whether column can be sorted
     */
    sortColumn?: boolean;
    /**
     * Sort function to use for this column
     */
    sortFn?: SortFn;
    /**
     * Optional render callback for when a td is rendered
     */
    onRenderCell?: onRenderCell;
}
export interface ITableCaption {
    /**
     * Class name applied to the Caption Element
     */
    className?: string;
    /**
     * Text value for caption header
     */
    headerText?: string;
    /**
     * Custom caption header
     */
    captionHeader?: React.FC;
    /**
     * Text value for caption description
     */
    descriptionText?: string;
    /**
     * Function to get the caption description
     */
    getSortCaptionDescription?: TableSortCaptionDescription;
    /**
     * Heading Level i.e. 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'. Defaults value is h1.
     */
    headingLevel?: string;
}
export interface IStickyConfig {
    /**
     * Set Table Caption as sticky
     */
    captionSticky?: boolean;
    /**
     * zIndex for table Caption
     */
    captionIndex?: number;
    /**
     * Top offset value for Caption
     */
    captionOffset?: string;
    /**
     * Set Table Header as sticky, if true MaxHeight is defaulted to '500px'
     */
    headerSticky?: boolean;
    /**
     * zIndex for Table Header
     */
    headerIndex?: number;
    /**
     * Top offset value for Header e.g. '100px' or '8rem'
     */
    headerOffset?: string;
    /**
     * Max Height value for table container e.g. '500px'
     */
    maxHeight?: string;
}
export declare type ITableDataState = {
    data: ITableData[];
};
export declare type ITableSortState = {
    sortColumn?: string;
    isSortAscending?: boolean;
    focusedColumn?: string;
};
export declare type ITablePaginationState = {
    page?: number;
    pageSize?: number;
};
export declare type ITableCaptionState = {
    captionDescription?: string;
};
export declare type ITableAction = {
    type?: ActionType;
    payload?: any;
};
export declare type ITableState = ITableCaptionState & ITableDataState & ITableSortState;
export declare type TableSortCaptionDescription = (sortColumn: string, isSortAscending: boolean) => string;
export declare type OnSortFunction = (isAscending: boolean, sortColumnLabel?: string, sortColumnKey?: string) => void;
export declare enum ActionType {
    RESET_TABLE_STATE = 0,
    SET_DATA = 1,
    SET_CAPTION_DESCRIPTION = 2,
    SET_FOCUS_COLUMN = 3,
    SORT = 4
}
export declare enum SortDirection {
    ASC = 1,
    DESC = -1
}
export {};
