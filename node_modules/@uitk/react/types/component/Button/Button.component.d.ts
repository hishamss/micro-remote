import React from "react";
import { AriaButtonProps } from "@react-types/button";
import { PressEvent } from "@react-types/shared";
declare type Variant = "alternative" | "inverse" | "ghost" | "ghost-alternative" | "ghost-inverse";
declare type Size = "s" | "m" | "l";
export interface ButtonProps extends Omit<React.ComponentProps<"button">, "ref"> {
    onPress?: (e: PressEvent) => void;
    /**
     * Button variant.
     */
    variant?: Variant;
    /**
     * Size variant.
     */
    size?: Size;
    /**
     * Whether button displays as block taking 100% width of container.
     */
    block?: boolean;
    /**
     * Class name applied to the native button element.
     */
    className?: string;
    /**
     * Icon to display to the left of the button.
     */
    icon?: React.ReactNode;
    /**
     * Ref that is bound to the underlying button element.
     */
    buttonRef?: React.MutableRefObject<HTMLButtonElement>;
    /**
     * Disabled
     */
    disabled?: boolean;
}
export declare const Button: import("styled-components").StyledComponent<React.FC<ButtonProps & AriaButtonProps<"button">>, import("styled-components").DefaultTheme, {}, never>;
export {};
