'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('./external/tslib/tslib.es6.js');
var React = require('react');
var styledComponents = require('styled-components');
var lodash = require('./external/lodash/lodash.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var sizes = {
  s: "16px",
  m: "24px",
  l: "36px"
};
var IconTheme;

(function (IconTheme) {
  IconTheme["colorTextBrand"] = "color.text.brand.value";
  IconTheme["colorTextBase"] = "color.text.base.value";
  IconTheme["colorTextError"] = "color.semantic.error.base.value";
  IconTheme["colorTextSuccess"] = "color.semantic.success.base.value";
})(IconTheme || (IconTheme = {}));

var createSvgIcon = function createSvgIcon(path, themeColorKey) {
  return function (_a) {
    var size = _a.size,
        fill = _a.fill,
        customSize = _a.customSize,
        className = _a.className,
        _a$ariaHidden = _a.ariaHidden,
        ariaHidden = _a$ariaHidden === void 0 ? true : _a$ariaHidden,
        ariaLabel = _a.ariaLabel,
        unhandledProps = tslib_es6.__rest(_a, ["size", "fill", "customSize", "className", "ariaHidden", "ariaLabel"]);

    var dimensions = customSize ? customSize : sizes[size || "s"];
    var themeValue = React.useContext(styledComponents.ThemeContext) || {};
    var iconColor = "";

    if (fill) {
      iconColor = fill;
    } else if (themeColorKey) {
      iconColor = lodash['default'].get(themeValue, IconTheme[themeColorKey]) || "";
    }

    return /*#__PURE__*/React__default['default'].createElement("svg", Object.assign({}, unhandledProps, {
      style: {
        display: "inline-block"
      },
      className: "icon ".concat(className ? className : ""),
      xmlns: "http://www.w3.org/2000/svg",
      height: dimensions,
      width: dimensions,
      viewBox: "0 0 24 24",
      focusable: "false",
      "aria-hidden": ariaHidden,
      role: "img",
      fill: iconColor,
      "aria-label": ariaLabel
    }), path);
  };
};

exports.createSvgIcon = createSvgIcon;
